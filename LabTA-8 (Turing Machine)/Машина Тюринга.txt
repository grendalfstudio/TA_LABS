; This program finds x + y (if x > y) or x * y (if x <= y)
; Input: two strings of 0's and 1's, eg '1001001 1100'

; Machine starts in state 0.

;====== First part: copy the input to right ======
; State 0: read the leftmost symbol of the first number
; 0-group of the first number
0 0 a r 0-copy0 		; replace 0 with a
0 1 b r 0-copy1			; replace 1 with b
0 _ # r split			; put splitter and go over the space

0-copy0 * * r 0-copy0
0-copy0 _ * r 0-copy0-1s

0-copy0-1s * * r 0-copy0-1s
0-copy0-1s _ * r 0-copy0-2s

0-copy0-2s _ 0 l 0-moveback
0-copy0-2s * * r 0-copy0-2s


0-copy1 * * r 0-copy1
0-copy1 _ * r 0-copy1-1s

0-copy1-1s * * r 0-copy1-1s
0-copy1-1s _ * r 0-copy1-2s

0-copy1-2s _ 1 l 0-moveback
0-copy1-2s * * r 0-copy1-2s

0-moveback * * l 0-moveback
0-moveback a * r 0
0-moveback b * r 0

; Put a splitter # between the copied numbers
split * * r split
split _ * r split-1s

split-1s * * r split-1s
split-1s _ # l split-back

split-back * * l split-back
split-back # * r 1

; 1-group of the second number
1 0 a r 1-copy0 		; replace 0 with a
1 1 b r 1-copy1			; replace 1 with b
1 _ * r 0-comp			; go over the space

1-copy0 * * r 1-copy0
1-copy0 _ * r 1-copy0-1s

1-copy0-1s * * r 1-copy0-1s
1-copy0-1s # * r 1-copy0-2s

1-copy0-2s _ 0 l 1-moveback
1-copy0-2s * * r 1-copy0-2s


1-copy1 * * r 1-copy1
1-copy1 _ * r 1-copy1-1s

1-copy1-1s * * r 1-copy1-1s
1-copy1-1s # * r 1-copy1-2s

1-copy1-2s _ 1 l 1-moveback
1-copy1-2s * * r 1-copy1-2s

1-moveback * * l 1-moveback
1-moveback a * r 1
1-moveback b * r 1

;===== Second part: compare the input ===== 
; State 0-comp: read the leftmost symbol of copied numbers
0-comp * _ r 0-comp-R
0-comp # * r #-comp

0-comp-R * * r 0-comp-R
0-comp-R _ * l 1-comp

1-comp * _ l 1-comp-L
1-comp # * * greater

1-comp-L * * l 1-comp-L
1-comp-L _ * r 0-comp

#-comp _ * * equal-back
#-comp * * r less_equal

equal-back * _ l equal-back
equal-back a * * compAB
equal-back b * * compAB

;=== Additional compare for numbers with equal length ===
compAB * * l compAB
compAB _ * r equal

equal a 0 r compA
equal b 1 r compB
equal # * r less_equal-L

; compA group
compA * * r compA
compA # * r compA#

compA# * * r compA#
compA# a 0 l comp-back
compA# b 1 l less_equal-L

; compB group
compB * * r compB
compB # * r compB#

compB# * * r compB#
compB# b 1 l comp-back
compB# a 0 l greater-L

; Moving backwards
comp-back * * l comp-back
comp-back # * l comp-back#

comp-back# * * l comp-back#
comp-back# 0 * r equal
comp-back# 1 * r equal

; Replacing digits into the symbols
greater-L * * r greater-L
greater-L _ * l G-replace

G-replace a 0 l G-replace
G-replace b 1 l G-replace
G-replace # _ l G-replace
G-replace * * l G-replace
G-replace _ * r greater

less_equal-L * * r less_equal-L
less_equal-L _ * l LE-replace

LE-replace a 0 l LE-replace
LE-replace b 1 l LE-replace
LE-replace # _ l LE-replace
LE-replace * * l LE-replace
LE-replace _ * r less_equal

;===== 3.1 part: find x + y (x > y) =====
greater * _ l greater
greater a * * G-leftAB
greater b * * G-leftAB

G-leftAB a 0 l G-leftAB
G-leftAB b 1 l G-leftAB
G-leftAB # _ l G-leftAB
G-leftAB _ * r sum

sum _ _ r 1s
sum * * r sum
1s _ _ l 2s
1s * * r 1s
2s 0 _ l 3x
2s 1 _ l 3y
2s _ _ l 7
3x _ _ l 4x
3x * * l 3x
3y _ _ l 4y
3y * * l 3y
4x 0 x r sum
4x 1 y r sum
4x _ x r sum
4x * * l 4x    ; skip the x/y's
4y 0 1 * 5
4y 1 0 l 4y
4y _ 1 * 5
4y * * l 4y    ; skip the x/y's
5 x x l 6
5 y y l 6
5 _ _ l 6
5 * * r 5
6 0 x r sum
6 1 y r sum

7 x 0 l 7
7 y 1 l 7
7 _ _ r halt
7 * * l 7

;===== 3.2 part: find x * y (x <= y) =====
less_equal * _ r less_equal
less_equal _ * l LE-left

LE-left * _ l LE-left
LE-left a 0 l LE-leftAB
LE-left b 1 l LE-leftAB

LE-leftAB a 0 l LE-leftAB
LE-leftAB b 1 l LE-leftAB
LE-leftAB # _ l LE-leftAB
LE-leftAB _ * r product

; Set up tally
product * * l 1p
1p _ _ l 2p
2p _ 0 r 3p
3p _ _ r 10

; Find end of num1
10 _ _ l 11
10 x x l 11
10 0 0 r 10
10 1 1 r 10


; If last digit of num1 is 0, multiply num2 by 2
11 0 x r 20
; If last digit of num1 is 1, add num2 to tally and then multiply num2 by 2
11 1 x r 30


; Multiply num2 by 2
20 _ _ r 20
20 x x r 20
20 * * r 21
21 _ 0 l 25 ; Multiplication by 2 done, return to end of num1
21 * * r 21
25 _ _ l 26
25 * * l 25
26 _ _ r 80 ; Finished multiplying. Clean up
26 x x l 26
26 0 0 * 11
26 1 1 * 11

; Add num2 to tally
30 _ _ r 30
30 x x r 30
30 * * r 31
31 _ _ l 32
31 * * r 31
32 0 o l 40 ; Add a zero
32 1 i l 50 ; Add a one
32 o o l 32
32 i i l 32
32 _ _ r 70 ; Finished adding

; Adding a 0 to tally
40 _ _ l 41
40 * * l 40 ; Found end of num2
41 _ _ l 41
41 * * l 42 ; Found start of num1
42 _ _ l 43 ; Found end of num1
42 * * l 42
43 o o l 43
43 i i l 43
43 0 o r 44
43 1 i r 44
43 _ o r 44
44 _ _ r 45 ; Found end of tally
44 * * r 44
45 _ _ r 45
45 * * r 46 ; Found start of num1
46 _ _ r 47 ; Found end of num1
46 * * r 46
47 _ _ r 47
47 * * r 48
48 _ _ l 32 ; Found end of num2
48 * * r 48

; Adding a 1 to tally
50 _ _ l 51 ; Found end of num2
50 * * l 50 
51 _ _ l 51
51 * * l 52 ; Found start of num1
52 _ _ l 53 ; Found end of num1
52 * * l 52
53 o o l 53
53 i i l 53
53 _ i r 55
53 0 i r 55 ; return to num2
53 1 o l 54
54 0 1 r 55
54 1 0 l 54
54 _ 1 r 55
55 _ _ r 56 ; Found end of tally
55 * * r 55
56 _ _ r 56
56 * * r 57 ; Found start of num1
57 _ _ r 58 ; Found end of num1
57 * * r 57
58 _ _ r 58
58 * * r 59
59 _ _ l 32 ; Found end of num2
59 * * r 59

; Finished adding, clean up
70 i 1 r 70
70 o 0 r 70
70 _ _ l 71
71 _ _ l 72 ; Found end of num2
71 * * l 71
72 _ _ l 72
72 * * l 73 ; Found start of num1
73 _ _ l 74
73 * * l 73
74 o 0 l 74
74 i 1 l 74
74 * * r 75 ; Finished cleaning up tally
75 _ _ r 76
75 * * r 75
76 _ _ r 20 ; Multiply num2 by 2
76 * * r 76

; Finished multiplying, clean up
80 x _ r 80
80 _ _ r 81
81 _ _ l 82
81 * _ r 81
82 _ _ l 82
82 * * * halt